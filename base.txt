# Specify your desired AWS region
provider "aws" {
  region = "us-east-1"
}

# Create a security group allowing inbound traffic on port 80
resource "aws_security_group" "web" {
  name        = "web_sg"
  description = "Allow inbound traffic on port 80"
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Launch an EC2 instance
resource "aws_instance" "example" {
  ami                    = "ami-0c55b159cbfafe1f0" # Specify your desired AMI ID
  instance_type          = "t2.micro"              # Specify your desired instance type
  security_groups        = [aws_security_group.web.name]
  associate_public_ip_address = true
  
  tags = {
    Name = "example-instance" # Specify tags for your instance
  }
}

# Create a target group
resource "aws_lb_target_group" "example" {
  name     = "example-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.default.id
}

# Add EC2 instance to the target group
resource "aws_lb_target_group_attachment" "example" {
  target_group_arn = aws_lb_target_group.example.arn
  target_id        = aws_instance.example.id
  port             = 80
}

# Create an Application Load Balancer
resource "aws_lb" "example" {
  name               = "example-alb"
  internal           = false
  load_balancer_type = "application"
  
  security_groups = [aws_security_group.web.id]
  
  subnets = ["subnet-12345678", "subnet-87654321"] # Specify your subnets
  
  enable_deletion_protection = false

  tags = {
    Name = "example-alb"
  }
}

# Create Route53 record
resource "aws_route53_record" "example" {
  zone_id = "YOUR_ZONE_ID"
  name    = "hello.com"
  type    = "A"
  alias {
    name                   = aws_lb.example.dns_name
    zone_id                = aws_lb.example.zone_id
    evaluate_target_health = true
  }
}
